{-# language KindSignatures #-}
signature Language.Python.Syntax.Digits.Sig where

import Data.Functor.Classes (Eq1(..), Ord1(..), Show1(..))
import Data.List.NonEmpty (NonEmpty)
import GHC.Generics (Generic, Generic1)

data Digits (a :: *)
instance Eq a => Eq (Digits a)
instance Ord a => Ord (Digits a)
instance Show a => Show (Digits a)
instance Eq1 Digits
instance Ord1 Digits
instance Show1 Digits
instance Functor Digits
instance Foldable Digits
instance Traversable Digits
instance Generic (Digits a)
instance Generic1 Digits

data DigitsTail (a :: *)
instance Eq a => Eq (DigitsTail a)
instance Ord a => Ord (DigitsTail a)
instance Show a => Show (DigitsTail a)
instance Generic (DigitsTail a)

toDigits :: NonEmpty a -> Digits a
fromDigits :: Digits a -> NonEmpty a

consDigits :: a -> DigitsTail a -> Digits a

showDigits :: (a -> Char) -> Digits a -> String
